# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7R4-086Boegn80lUyj43opI6_JGhtrN
"""

#Say "Hello, World!" With Python
print("Hello, World!")
#Arithmetic Operators
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a+b)
    print(a-b)
    print(a*b)
#Python: Division
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    i= a//b
    print(i)
    fl= a/b
    fl=round(fl,11)
    print(fl)
#Loops
if __name__ == '__main__':
    n = int(input())


for i in range(n):
 print(i*i)
#Write a function
def is_leap(year):

    leap = False

    # Write your logic here
    if ((year%400 == 0) & (year%100 == 0)) | ((year%4 ==0) & (year%100 != 0)):
        leap= True

    return leap
#Print Function
if __name__ == '__main__':
    n = int(input())
    start = 1
    end = 150
    inc = 1

if n < start or n > end:
    print("n is not in the range!")
else:
    for i in range(start, n+1 , inc):
        print(i, end="")
#List Comprehensions
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

print([[i, j, k] for i in range(x + 1) for j in range(y + 1)
for k in range(z + 1) if (i+j+k)!= n])
#Find the Runner-Up Score!
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

    arrayx = set(arr)
    arrayw = sorted(arrayx)
    print(arrayw[-2])
#Nested Lists
if __name__ == '__main__':
    name_list=[]
    score_list=[]
    all_list=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        name_list.append(name)
        score_list.append(score)
        all_list.append([name,score])
    score_list=list(set(score_list))# eliminates double time values
    score_list.sort()
    second =score_list[1]
    result=[i[0] for i in all_list if i[1] == second]
    result.sort()
    for i in result:
        print(i)
#Finding the percentage
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    print(format(sum(student_marks[query_name])/len(student_marks[query_name]), ".2f"))
#Lists
if __name__ == '__main__':
    N = int(input())
    List=[]
    for _ in range(N):
        cmd = input().split();
        if cmd[0] == "insert":
            List.insert(int(cmd[1]), int(cmd[2]))
        elif cmd[0] == "append":
            List.append(int(cmd[1]))
        elif cmd[0] == "pop":
            List.pop();
        elif cmd[0] == "sort":
            List.sort();
        elif cmd[0] == "print":
            print(List)
        elif cmd[0] == "remove":
            List.remove(int(cmd[1]))
        else:
            List.reverse();
#Tuples
if __name__ == '__main__':
    n = int(input())
    intlist = map(int, input().split())
    inttuple = tuple(intlist)
    print(hash(inttuple))
#sWAP cASE
def swap_case(s):
    snew = []

    for item in s:
        if item.isalpha():
            if item.islower():
                snew.append(item.upper())
            else:
                snew.append(item.lower())
        else:
            snew.append(item)
    return ''.join(snew)
#String Split and Join
def split_and_join(line):
    nline=line.split(" ")
    fline="-".join(nline)
    return fline
#What's Your Name?
def print_full_name(first, last):
    print(f'Hello {first_name} {last_name}! You just delved into python.' )
#Mutations
def mutate_string(string, position, character):
    mylist=list(string)
    mylist[position]=character
    flist=''.join(mylist)
    return flist
#Find a string
def count_substring(string, sub_string):
    start=0
    end=len(sub_string)

    counter=0
    while end <= len(string):
     if sub_string == string[start:end]:
         counter+=1
     start+=1
     end+=1

    return counter
#String Validators
if __name__ == '__main__':
    s = input()
    print(any (item.isalnum() for item in s))
    print(any (item.isalpha() for item in s))
    print(any (item.isdigit() for item in s))
    print(any (item.islower() for item in s))
    print(any (item.isupper() for item in s))
#Text Alignment
#Replace all ______ with rjust, ljust or center.

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
#Text Wrap
def wrap(string, max_width):
    for i in range(0,len(string)+1,max_width):
        chunk = string[i:i+max_width]
        if len(chunk) ==max_width:
            print(chunk)
        else:
            return chunk
#Designer Door Mat
N,M = map(int, input().split())
for i in range(1,N,2):
    print(('.|.'*i).center(M,'-'))
print('WELCOME'.center(M,'-'))
for i in range(N-2,-1,-2):
    print(('.|.'*i).center(M,'-'))
#String Formatting
def print_formatted(number):
    width=len(bin(number)[2:])
    for i in range (1, number+1):
        decimal=str(i)
        octal=oct(i)[2:]
        hexadecimal= hex(i)[2:].upper()
        binary=bin(i)[2:]
        print(decimal.rjust(width),octal.rjust(width),hexadecimal.rjust(width),binary.rjust(width))
#Alphabet Rangoli
def print_rangoli(size):
    alp=[chr(i) for i in range(97,123)]
    alp=alp[:size]
    ind=list(range(size))
    ind=ind[:-1] + ind[::-1]

    for i in ind:
        start_ind = i + 1
        org = alp[-start_ind:]
        rev = org[::-1]
        row = rev + org[1:]
        row = "-".join(row)
        width = size * 4 -3
        row = row.center(width,"-")
        print(row)
#Capitalize!
def solve(s):
    for name in s.split():
        s = s.replace(name, name.capitalize())
    return s
#The Minion Game
def minion_game(string):
    vowels= 'AEOUI'
    kevin= stuart=0
    length=len(string)
    for i in range(length):
        if string[i] in vowels:
            kevin+=length-i
        else:
            stuart+=length-i
    if stuart>kevin:
        print(f'Stuart {stuart}')
    elif kevin>stuart:
        print(f'Kevin {kevin}')
    else:
        print(Draw)
#Merge the Tools!
def merge_the_tools(string, k):
    counter=0
    s=''
    for i in string:
        if i not in s:
            s=s+i
        counter+=1
        if (counter == k):
            print(s)
            counter=0
            s=''
#Introduction to Sets
from statistics import mean
def average(array):
    return mean(set(array))
#No Idea!
n,m = map(int, input().split())
array = list(map(int, input().split()))
a = set(map(int, input().split()))
b = set(map(int, input().split()))

happiness= 0

for i in array:
    if i in a:
        happiness += 1
    elif i in b:
        happiness -= 1
    else:
        pass
print(happiness)
#Symmetric Difference
n = int(input())
seta = set(map(int, input().split()))
m = int(input())
setb = set(map(int, input().split()))
a = (seta.difference(setb))
b = (setb.difference(seta))
ans = a.union(b)
for i in sorted(ans):
    print(i)
#Set .add()
n = int(input())
Country = set()
for i in range(n):
    Country.add(input())
print(len(Country))
#Set .discard(), .remove() & .pop()
n = int(input())
s = set(map(int,input().split()))
num = int(input())
for i in range(num):
    t = input().split()
    if t[0]=="remove":
        s.remove(int(t[1]))
    elif t[0]=="discard":
        s.discard(int(t[1]))
    else:
        s.pop()
print(sum(list(s)))
#Set .union() Operation
number = int(input())
lst = list(input().split())
usr = int(input())
t = list(input().split())
s1 = set(lst)
s2 = set(t)
print(len(s1.union(s2)))
#Set .intersection() Operation
n1 = int(input())
str1 = set(input().split())
n2 = int(input())
str2 = set(input().split())
str3 = str2.intersection(str1)
print(len(str3))
#Set .difference() Operation
n=input()
a=set(input().split())
m=input()
b=set(input().split())
print(len(a.difference(b)))
#Set .symmetric_difference() Operation
E = int(input())
Eng = set(input().split())
F = int(input())
Frn = set(input().split())
print(len(Eng ^ Frn))
#Set Mutations
len_set = int(input())
storage = set(map(int, input().split()))
op_len = int(input())

for i in range(op_len):
    operation = input().split()
    if operation[0] == 'intersection_update':
        tstorage = set(map(int, input().split()))
        storage.intersection_update(tstorage)
    elif operation[0] == 'update':
        tstorage = set(map(int, input().split()))
        storage.update(tstorage)
    elif operation[0] == 'symmetric_difference_update':
        tstorage = set(map(int, input().split()))
        storage.symmetric_difference_update(tstorage)
    elif operation[0] == 'difference_update':
        tstorage = set(map(int, input().split()))
        storage.difference_update(tstorage)
    else:
        assert False

print(sum(storage))
#The Captain's Room
k = int(input())
a = list(map(int, input().split()))
unique_set = set(a)
print((sum(unique_set)*k - sum(a))//(k - 1))
#Check Subset
n = int(input())
for _ in range(n):
    lengtha=int(input())
    seta=set(map(int, input().split()))
    lengthb=int(input())
    setb=set(map(int, input().split()))
    print(len(setb.intersection(seta)) == lengtha)
#Check Strict Superset
A = set(map(int, input().split()))
N = int(input())
l = []
for i in range(N):
    B = set(map(int, input().split()))
    l.append(A.issuperset(B))
print(all(l))
#collections.Counter()
from collections import Counter
nofshoes = int(input())
sizelist = map(int, input().split())
nofcust = int(input())
shoes = Counter(sizelist)
income = 0
for i in range(nofcust):
    size, price = map(int, input().split())
    if shoes[size]:
        income += price
        shoes[size] -= 1
print(income)
#DefaultDict Tutorial
from collections import defaultdict
d = defaultdict(list)
n, m = list(map(int, input().split()))

for i in range(n):
    d[input()].append(i+1)
for i in range(m):
    print(' '.join(map(str, d[input()])) or -1)
#Collections.namedtuple()
from collections import namedtuple
input_ = int(input())
my_fields = input().split()
total_marks = 0
for _ in range(input_):
    students = namedtuple('my_student', my_fields)
    MARKS, CLASS, NAME, ID = input().split()
    my_student = students(MARKS, CLASS, NAME, ID)
    total_marks += int(my_student.MARKS)
y = "{:.2f}".format(total_marks / input_)
print(y)
#Collections.OrderedDict()
from collections import defaultdict
ordered_dict=defaultdict(int)
A=int(input())

for _ in range(A):
    s=input().split()
    item=" ".join(s[:-1])
    price=int(s[-1])
    ordered_dict[item]+=price

for item, value in ordered_dict.items():
    print(item, value)
#Word Order
from collections import Counter
n = int(input())
m = [input().strip() for _ in range(n)]
cresp = Counter(m)
print(len(cresp))
print(*cresp.values())
#Collections.deque()
from collections import deque
d = deque()
for _ in range(int(input())):
    inp = input().split()
    getattr(d, inp[0])(*[inp[1]] if len(inp) > 1 else [])
print(*[item for item in d])
#Company Logo
import math
import os
import random
import re
import sys
from collections import Counter

if __name__ == '__main__':
    s = input()
    s = sorted(s)

    Freq = Counter(list(s))
    for a, b in Freq.most_common(3):
        print(a, b)
#Piling Up!
from collections import deque
ntest = int(input())

for i in range(ntest):
    nblocks = int(input())
    blocks = deque(list(map(int, input().split())))
    lst = float('inf')

    while blocks:
        if lst >= blocks[0] >= blocks[-1]:
            lst = blocks.popleft()
        elif lst >= blocks[-1] >= blocks[0]:
            lst = blocks.pop()
        else:
            print('No')
            break
    if not blocks:
        print('Yes')
#Calendar Module
import calendar
m, d, y = input().split()
cal = calendar
dayofweek = cal.weekday(int(y), int(m), int(d))
day_name = cal.day_name
print(day_name[dayofweek].upper())
#Time Delta
#!/bin/python3

import math
import os
import random
import re
import sys
from datetime import datetime

def time_delta(t1, t2):
    time_format = '%a %d %b %Y %H:%M:%S %z'
    t1 = datetime.strptime(t1, time_format)
    t2 = datetime.strptime(t2, time_format)
    return str(int(abs((t1-t2).total_seconds())))
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        t1 = input()

        t2 = input()

        delta = time_delta(t1, t2)

        fptr.write(delta + '\n')

    fptr.close()
#Exceptions
for i in range(int(input())):
    try:
        a, b = map(int, input().split())
        print(a//b)
    except Exception as e:
        print("Error Code:", e)
#Zipped!
x, y = map(int, input().split())
sheet = []

for _ in range(y):
    sheet.append(map(float, input().split()))

for i in zip(*sheet):
    print(sum(i)/len(i))
#Map and Lambda Function
cube = lambda x: x**3

def fibonacci(n):
    # return a list of fibonacci numbers
    x = []
    a, b = 0, 1
    while len(x) != n:
        x.append(a)
        a, b = b, a+b
    return x
#Athlete Sort
#!/bin/python3

import math
import os
import random
import re
import sys

if __name__ == '__main__':
    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    k = int(input())

    w=sorted(arr, key=lambda row: row[k])
    for i in range(len(w)):
        for j in range(len(w[i])):
            print(w[i][j], end=' ')
        print()
#ginortS
s = input()
sorted_s = ''.join(sorted(s, key=lambda char: (char.isdigit(), char.isdigit() and int(char) % 2 == 0, char.swapcase())))
print(sorted_s)
#XML 1 - Find the Score
def get_attr_number(node):
    return len(node.attrib) + sum(get_attr_number(child) for child in node)
#XML2 - Find the Maximum Depth
maxdepth = -1
def depth(elem, level):
    global maxdepth
    if (level == maxdepth):
        maxdepth += 1

    for child in elem:
        depth(child, level + 1)
#Standardize Mobile Number Using Decorators
def wrapper(f):
    def fun(l):
        f(['+91 ' + c[-10:-5] + ' ' + c[-5:] for c in l])
    return fun
#Decorators 2 - Name Directory
def person_lister(f):
    def inner(people):
        return [*map(f, list(sorted(people, key=lambda p: int(p[2]))))]
    return inner
#Birthday Cake Candles
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'birthdayCakeCandles' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY candles as parameter.
#

def birthdayCakeCandles(candles):
    m= max(candles)
    return candles.count(m)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()
#Number Line Jumps
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    h = x2 - x1

    if v1 > v2 and h% (v1 - v2) ==0:
        return 'YES'
    else:
        return 'NO'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()
#Viral Advertising
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'viralAdvertising' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def viralAdvertising(n):
    tlikes = 0
    shared = 5

    for i in range(n):
        like = shared//2
        tlikes += like
        shared = like * 3
    return tlikes

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()
#Recursive Digit Sum
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superDigit' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. STRING n
#  2. INTEGER k
#

def superDigit(n, k):
    def h(n):
        total=0
        for number in n:
            total += int(number)
        total = str(total)
        if len(total) == 1:
            return total
        else:
            return h(total)
    w = str(h(n) * k)
    return h(w)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()
#Insertion Sort - Part 1
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    key = arr[-1]
    i = n-1
    while i > 0 and arr[i-1] > key:
        arr[i] = arr[i-1]
        print (*arr)
        i -= 1
    arr[i] = key
    print(*arr)

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)
#Insertion Sort - Part 2
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort2' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort2(n, arr):
    for j in range(1, n):
        key = arr[j]
        i = j
        while i > 0 and arr[i-1] > key:
            arr[i] = arr[i-1]
            i -= 1
        arr[i] = key
        print(*arr)

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)